package com.authentication.auth_service.service;

import com.authentication.auth_service.dto.AuthResponse;
import com.authentication.auth_service.dto.LoginRequest;
import com.authentication.auth_service.dto.LoginResponse;
import com.authentication.auth_service.dto.RegisterRequest;
import com.authentication.auth_service.exception.EmailAlreadyExistsException;
import com.authentication.auth_service.model.Role;
import com.authentication.auth_service.model.User;
import com.authentication.auth_service.repository.UserRepository;
import com.authentication.auth_service.util.JwtUtil;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@RequiredArgsConstructor
public class AuthService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final JwtUtil jwtUtil;

    /**
     * Register a new user with UUID generated by Hibernate.
     */
    @Transactional
    public AuthResponse register(RegisterRequest request) {
        if (userRepository.existsByEmail(request.getEmail())) {
            throw new EmailAlreadyExistsException("Email is already registered");
        }

        Role role = parseRole(request.getRole());
        String hashedPassword = passwordEncoder.encode(request.getPassword());

        User user = User.builder()
                // Removed manual UUID assignment here
                .email(request.getEmail())
                .username(request.getUsername())
                .password(hashedPassword)
                .role(role)
                .build();

        userRepository.save(user);

        return new AuthResponse("User registered successfully", user.getEmail(), user.getId());
    }

    /**
     * Login and return JWT containing UUID.
     */
    public LoginResponse login(LoginRequest request) {
        User user = userRepository.findByEmail(request.getEmail())
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));

        if (!passwordEncoder.matches(request.getPassword(), user.getPassword())) {
            throw new BadCredentialsException("Invalid credentials");
        }

        String jwt = jwtUtil.generateToken(user); // Should include UUID claim

        return new LoginResponse(jwt, user.getEmail(), user.getRole().name(), user.getId());
    }

    /**
     * Fetch user by email â€” used by JWT validation.
     */
    public User getUserByEmail(String email) {
        return userRepository.findByEmail(email)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with email: " + email));
    }

    /**
     * Validate and parse role string.
     */
    private Role parseRole(String roleInput) {
        if (roleInput == null || roleInput.isBlank()) {
            throw new IllegalArgumentException("Role must not be empty. Allowed values: USER, OWNER, ADMIN");
        }
        try {
            return Role.valueOf(roleInput.trim().toUpperCase());
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid role. Allowed values: USER, OWNER, ADMIN");
        }
    }
}
